package neuronmap;

import java.awt.*;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import javax.imageio.ImageIO;

/**
 *
 * @author sophiaanderson Apr 5, 2018 7:22:25 PM
 */
public class NPanel extends javax.swing.JPanel implements Serializable {

    static Controller theController;

    
    
    boolean trait1val = false;
    boolean trait2val = false;
    boolean trait3val = false;
    boolean trait4val = false;
    static java.awt.event.MouseEvent click;

    static public boolean addANeuron = false;
    static public boolean addAExcit = false;
    static public boolean addAInhib = false;
    static public boolean delANeuron = false;
    
    static public double sStrength = 1.0;
    static public double sMax = 20.0;
    
    static Neuron press = null;
    static Neuron release = null;

    public NPanel() {
        initComponents();
        setLayout(null);
        setVisible(true);
        sliderOn();
        reset();
    }

    public void reset() {
        theController = new Controller(this);
        theController.start();
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        theController.paint(g);
        g.fillOval(0, 0, 10, 10);            // Just checking!
        drawImages(g);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        trait1 = new javax.swing.JToggleButton();
        trait2 = new javax.swing.JToggleButton();
        trait3 = new javax.swing.JToggleButton();
        trait4 = new javax.swing.JToggleButton();
        runButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        synapseStrength = new javax.swing.JSlider();
        strengthText = new javax.swing.JLabel();

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        setLayout(null);

        trait1.setText("Sharp Teeth");
        trait1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trait1ActionPerformed(evt);
            }
        });
        add(trait1);
        trait1.setBounds(0, 150, 110, 29);

        trait2.setText("Fur");
        trait2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trait2ActionPerformed(evt);
            }
        });
        add(trait2);
        trait2.setBounds(0, 300, 110, 29);

        trait3.setText("Claws");
        trait3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trait3ActionPerformed(evt);
            }
        });
        add(trait3);
        trait3.setBounds(0, 450, 110, 29);

        trait4.setText("Slobbery");
        trait4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trait4ActionPerformed(evt);
            }
        });
        add(trait4);
        trait4.setBounds(0, 600, 110, 29);

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        add(runButton);
        runButton.setBounds(80, 60, 75, 29);

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        add(stopButton);
        stopButton.setBounds(150, 60, 75, 29);

        synapseStrength.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                synapseStrengthStateChanged(evt);
            }
        });
        add(synapseStrength);
        synapseStrength.setBounds(320, 50, 190, 29);

        strengthText.setText("1.0");
        add(strengthText);
        strengthText.setBounds(335, 20, 150, 16);
    }// </editor-fold>//GEN-END:initComponents

    private void trait1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trait1ActionPerformed
        trait1val = !trait1val;
        System.out.println("I'm changed!");
    }//GEN-LAST:event_trait1ActionPerformed

    private void trait2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trait2ActionPerformed
        trait2val = !trait2val;
        System.out.println("I'm changed!");
    }//GEN-LAST:event_trait2ActionPerformed

    private void trait3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trait3ActionPerformed
        trait3val = !trait3val;
        System.out.println("I'm changed!");
    }//GEN-LAST:event_trait3ActionPerformed

    private void trait4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trait4ActionPerformed
        trait4val = !trait4val;
        System.out.println("I'm changed!");
    }//GEN-LAST:event_trait4ActionPerformed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        click = evt;
        press = checkClick(evt.getX(), evt.getY());
    }//GEN-LAST:event_formMousePressed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        for (int i = 0; i < 1000; i++) {
            theController.incSteps();
        }
    }//GEN-LAST:event_runButtonActionPerformed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        release = checkClick(evt.getX(), evt.getY());
        //System.out.println("form mouse has been released");
        adders(press, release);
        repaint();
    }//GEN-LAST:event_formMouseReleased

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        theController.stopIt();
        repaint();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void synapseStrengthStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_synapseStrengthStateChanged
        DecimalFormat df = new DecimalFormat("#.###");
        df.setRoundingMode(RoundingMode.CEILING);
        sStrength = (synapseStrength.getValue() / 100.0) * sMax;
        strengthText.setText(df.format(sStrength));
        sStrength = Double.parseDouble(df.format(sStrength));
        //strengthText.setVisible(true);
        repaint();
    }//GEN-LAST:event_synapseStrengthStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton runButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JLabel strengthText;
    private javax.swing.JSlider synapseStrength;
    private javax.swing.JToggleButton trait1;
    private javax.swing.JToggleButton trait2;
    private javax.swing.JToggleButton trait3;
    private javax.swing.JToggleButton trait4;
    // End of variables declaration//GEN-END:variables

    private Neuron checkClick(int x, int y) {
        return theController.theMap.checkClick(x, y);
    }

    public static void saveFile() {
        if (theController.theMap != null) {
            try {
                String fn = "foo";
                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(fn));
                //theController.stop();
                //gotta figure out how to load it back in a non damaged state
                out.writeObject(theController.theMap);
                out.close();
            } catch (Exception e) {
                System.out.println("oops " + e);
            }
        }
    }

    public static void loadFile() {
        try {
            String fn = "foo";
            ObjectInputStream in = new ObjectInputStream(new FileInputStream(fn));
            theController.theMap = (NeuronMap) in.readObject();
            in.close();
        } catch (Exception e) {
            System.out.println("oops " + e);
        }
        //theController.start();      // start the new NN
    }
    
    static void adders(Neuron up, Neuron down)
    {
        delNeuron(down);
        addInhib(up,down);
        addNeuron();
        addExcit(up,down);
    }

    static void addInhib(Neuron up, Neuron down) {
        if (addAInhib && up != null && down != null) {
            theController.theMap.addInhib(up, down, sStrength);
        }
        press = null;
        release = null;
    }

    static void addExcit(Neuron up, Neuron down) {
        if (addAExcit && up != null && down != null) {
            theController.theMap.addExcit(up, down, sStrength);
        }
        press = null;
        release = null;
    }

    static void addNeuron() {
        if(addANeuron)
        {
            theController.theMap.addNeuron(new Neuron(new Point2D.Double(click.getX(), click.getY())));
        }
        press = null;
        release = null;
    }
    
    static void delNeuron(Neuron n) {
        SynapseList check = new SynapseList();
        if(delANeuron)
        {
            int index = theController.theMap.theNeuronList.indexOf(n);
            System.out.println(""+index);
            theController.theMap.theNeuronList.remove(index);
            for (Neuron neuron : theController.theMap.theNeuronList) {
                for (Synapse synapse : neuron.mySynapses) {
                    if(synapse.connection.equals(n))
                        check.add(synapse); 
                }
                for (Synapse synapse : check) {
                    neuron.deleteSynapse(synapse);
                }
                check.clear();
            }
            
            
            
        }
        press = null;
        release = null;
    }

    static void addaNeuron(boolean x) {
        addANeuron = x;
    }

    static void addAExcit(boolean x) {
        addAExcit = x;
    }

    static void addAInhib(boolean x) {
        addAInhib = x;
    }
    
    static void removeaNeuron(boolean b) {
        delANeuron = b;
    }

    private BufferedImage catImage;
    private BufferedImage dogImage;
    
    private void drawImages(Graphics g) {
        try {                
          catImage = ImageIO.read(new File("cat.png"));
          dogImage = ImageIO.read(new File("dog.png"));
       } catch (IOException ex) {
            System.out.println("Eh oops");
       }
       g.drawImage(catImage, 900, 160, this); // see javadoc for more info on the parameters
       g.drawImage(dogImage, 900, 460, this); // see javadoc for more info on the parameters
    }
    
    void sliderOn()
    {
        synapseStrength.setMinimum(0);
        synapseStrength.setMaximum(100);
        synapseStrength.setMinorTickSpacing(10);
        synapseStrength.setPaintTicks(true);
        synapseStrength.setVisible(true);
        strengthText.setVisible(true);
    }
    
    void sliderOff()
    {
        synapseStrength.setMinimum(0);
        synapseStrength.setMaximum(100);
        synapseStrength.setMinorTickSpacing(10);
        synapseStrength.setPaintTicks(true);
        synapseStrength.setVisible(false);
        strengthText.setVisible(false);
    }
    
}
